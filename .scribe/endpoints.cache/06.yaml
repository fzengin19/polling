## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Role Management'
description: |-

  APIs for managing user and survey roles
endpoints:
  -
    httpMethods:
      - GET
    uri: api/roles
    metadata:
      groupName: 'Role Management'
      groupDescription: |-

        APIs for managing user and survey roles
      subgroup: ''
      subgroupDescription: ''
      title: 'List Roles'
      description: 'Get a list of all available roles in the system.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success": true, "data": [{"name": "admin", "description": "Administrator role"}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/roles/assign
    metadata:
      groupName: 'Role Management'
      groupDescription: |-

        APIs for managing user and survey roles
      subgroup: ''
      subgroupDescription: ''
      title: 'Assign Role'
      description: 'Assign a role to a user or survey.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      role_name:
        name: role_name
        description: 'Name of the role to assign. Must exist in the roles table. The <code>name</code> of an existing record in the roles table.'
        required: true
        example: editor
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      model_type:
        name: model_type
        description: 'Type of model to assign the role to. Must be either "user" or "survey".'
        required: true
        example: user
        type: string
        enumValues:
          - user
          - survey
        exampleWasSpecified: false
        nullable: false
        custom: []
      model_id:
        name: model_id
        description: 'ID of the model (user or survey) to assign the role to.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      role_name: editor
      model_type: user
      model_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success": true, "message": "Role assigned successfully", "data": null}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/roles/remove
    metadata:
      groupName: 'Role Management'
      groupDescription: |-

        APIs for managing user and survey roles
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove Role'
      description: 'Remove a role from a user or survey.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      role_name:
        name: role_name
        description: 'Name of the role to remove. Must exist in the roles table. The <code>name</code> of an existing record in the roles table.'
        required: true
        example: editor
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      model_type:
        name: model_type
        description: 'Type of model to remove the role from. Must be either "user" or "survey".'
        required: true
        example: user
        type: string
        enumValues:
          - user
          - survey
        exampleWasSpecified: false
        nullable: false
        custom: []
      model_id:
        name: model_id
        description: 'ID of the model (user or survey) to remove the role from.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      role_name: editor
      model_type: user
      model_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success": true, "message": "Role removed successfully", "data": null}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/roles/users/{userId}'
    metadata:
      groupName: 'Role Management'
      groupDescription: |-

        APIs for managing user and survey roles
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User Roles'
      description: 'Get all roles assigned to a specific user.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      userId:
        name: userId
        description: 'The ID of the user.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      userId: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success": true, "data": [{"name": "editor", "model_type": "user", "model_id": 1}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/roles/surveys/{surveyId}'
    metadata:
      groupName: 'Role Management'
      groupDescription: |-

        APIs for managing user and survey roles
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Survey Roles'
      description: 'Get all roles assigned to a specific survey.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      surveyId:
        name: surveyId
        description: 'The ID of the survey.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      surveyId: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success": true, "data": [{"name": "viewer", "model_type": "survey", "model_id": 1}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/roles/users/{userId}/has/{roleName}'
    metadata:
      groupName: 'Role Management'
      groupDescription: |-

        APIs for managing user and survey roles
      subgroup: ''
      subgroupDescription: ''
      title: 'Check User Role'
      description: 'Check if a user has a specific role.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      userId:
        name: userId
        description: 'The ID of the user.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      roleName:
        name: roleName
        description: 'The name of the role.'
        required: true
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      userId: '1'
      roleName: admin
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success": true, "data": {"has_role": true}}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/roles/surveys/{surveyId}/has/{roleName}'
    metadata:
      groupName: 'Role Management'
      groupDescription: |-

        APIs for managing user and survey roles
      subgroup: ''
      subgroupDescription: ''
      title: 'Check Survey Role'
      description: 'Check if a survey has a specific role assigned.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      surveyId:
        name: surveyId
        description: 'The ID of the survey.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      roleName:
        name: roleName
        description: 'The name of the role.'
        required: true
        example: public
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      surveyId: '1'
      roleName: public
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success": true, "data": {"has_role": false}}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
