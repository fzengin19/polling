name: 'Media Management'
description: |-

  APIs for managing media files (images, videos, documents)
endpoints:
  -
    httpMethods:
      - POST
    uri: api/media/upload
    metadata:
      groupName: 'Media Management'
      groupDescription: |-

        APIs for managing media files (images, videos, documents)
      subgroup: ''
      subgroupDescription: ''
      title: 'Upload Media'
      description: 'Upload a media file and associate it with a question.'
      authenticated: true
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      model_type:
        name: model_type
        description: 'Type of the model to attach media to (e.g., "question", "survey", "survey-page", "choice").'
        required: true
        example: question
        type: string
        enumValues:
          - question
          - survey
          - survey-page
          - choice
        exampleWasSpecified: false
        nullable: false
        custom: []
      model_id:
        name: model_id
        description: 'ID of the model to attach media to. Must be at least 1. Must be at least 1.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      collection_name:
        name: collection_name
        description: 'Name of the collection to store the media in. Maximum 255 characters. Must not be greater than 255 characters.'
        required: true
        example: images
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      file:
        name: file
        description: 'Media file to upload. Allowed types: jpeg, png, jpg, gif, svg, pdf, doc, docx. Maximum size: 10MB. Must be a file. Must not be greater than 10240 kilobytes.'
        required: true
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      alt_text:
        name: alt_text
        description: 'Alternative text for the media. Maximum 255 characters. Must not be greater than 255 characters.'
        required: false
        example: 'A red circle'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      caption:
        name: caption
        description: 'Caption for the media. Maximum 500 characters. Must not be greater than 500 characters.'
        required: false
        example: 'This is a sample image'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      model_type: question
      model_id: 1
      collection_name: images
      alt_text: 'A red circle'
      caption: 'This is a sample image'
    fileParameters:
      file: null
    responses:
      -
        status: 200
        content: '{"success": true, "message": "Media uploaded successfully", "data": {"id": 1, "file_name": "image.jpg", "file_path": "/storage/media/image.jpg"}}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/media/{mediaId}'
    metadata:
      groupName: 'Media Management'
      groupDescription: |-

        APIs for managing media files (images, videos, documents)
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete Media'
      description: 'Delete a media file and its associated data.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      mediaId:
        name: mediaId
        description: 'The ID of the media file.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      mediaId: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success": true, "message": "Media deleted successfully", "data": null}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/media/{mediaId}/metadata'
    metadata:
      groupName: 'Media Management'
      groupDescription: |-

        APIs for managing media files (images, videos, documents)
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Media Metadata'
      description: 'Update metadata (alt text, caption, etc.) for a media file.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      mediaId:
        name: mediaId
        description: 'The ID of the media file.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      mediaId: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      alt_text:
        name: alt_text
        description: 'Alternative text for the media. Maximum 255 characters. Must not be greater than 255 characters.'
        required: false
        example: 'Updated alt text'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      caption:
        name: caption
        description: 'Caption for the media. Maximum 500 characters. Must not be greater than 500 characters.'
        required: false
        example: 'Updated caption'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      display_order:
        name: display_order
        description: 'Display order for media positioning. Must be at least 0. Must be at least 0.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      alt_text: 'Updated alt text'
      caption: 'Updated caption'
      display_order: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success": true, "message": "Media metadata updated successfully", "data": {"id": 1, "alt_text": "Updated alt text", "caption": "Updated caption"}}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/questions/{questionId}/media'
    metadata:
      groupName: 'Media Management'
      groupDescription: |-

        APIs for managing media files (images, videos, documents)
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Question Media'
      description: 'Get all media files associated with a specific question.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      questionId:
        name: questionId
        description: 'The ID of the question.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      questionId: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"success":false,"message":"Question not found","data":null}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
